name: "github-ci-docker"
on: 
  workflow_dispatch:
    inputs:
      art_server_id:
        required: true
        type: string
        default: "soleng"
        description: "Artifactory Server ID"
      art_repo_id:
        required: true
        type: string
        default: "carm-mvn-dev"
        description: "Artifactory Repository Name"
      art_project:
        required: true
        type: string
        default: "carm"
        description: "Artifactory Project ID"
      art_docker_registry:
        required: true
        type: string
        default: "soleng.jfrog.io/carm-docker-dev-local/"
        description: "Artifactory Docker Registry"
      art_docker_image:
        required: true
        type: string
        default: "petclinic:latest"
        description: "Docker Image name:version"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '19.0.2+7'
          cache: 'maven'
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v3
        with:
          version: latest
        env:
          JF_ENV_1: ${{ secrets.JF_SECRET_ENV_1 }}
          M2_HOME: /usr/local/apache-maven/apache-maven-3.9.0
      
      - name: Ping JFrog CLI
        run: jf rt ping
      
      - name: Compile and Test
        run: |
          jf mvnc --server-id-resolve=${{ github.event.inputs.art_server_id }} --server-id-deploy=${{ github.event.inputs.art_server_id }} --repo-resolve-releases=${{ github.event.inputs.art_repo_id }} --repo-resolve-snapshots=${{ github.event.inputs.art_repo_id }} --repo-deploy-releases=${{ github.event.inputs.art_repo_id }} --repo-deploy-snapshots=auto-${{ github.event.inputs.art_repo_id }}
          jf mvn clean install --project=${{ github.event.inputs.art_project }}
      
      - name: Build Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          tags: ${{ github.event.inputs.art_docker_registry }}${{ github.event.inputs.art_docker_image }}
      
      - name: Scan Docker Image for Vulnerabilities
        run: jf docker scan ${{ github.event.inputs.art_docker_registry }}${{ github.event.inputs.art_docker_image }} --project=${{ github.event.inputs.art_project }}
      
      - name: Collect Environment Variables
        run: |
          # Collect environment variables for the build
          jf rt bce --project=${{ github.event.inputs.art_project }}
          # Collect VCS details from git and add them to the build
          jf rt bag
      
      - name: Push Image to Artifactory
        run: jf docker push ${{ github.event.inputs.art_docker_registry }}${{ github.event.inputs.art_docker_image }} --server-id=${{ github.event.inputs.art_server_id }} --project=${{ github.event.inputs.art_project }}
      
      - name: Publish Build Info
        run: jf rt bp --project=${{ github.event.inputs.art_project }}